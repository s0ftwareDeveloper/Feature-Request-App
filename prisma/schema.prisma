datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_token     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String         @unique
  password      String
  role          String         @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  requests      FeatureRequest[]
  upvotes       Upvote[]
}

model FeatureRequest {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(100)
  description String    @db.VarChar(500)
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  upvotes     Upvote[]

  @@index([status])
  @@index([createdAt])
}

model Upvote {
  id        String        @id @default(cuid())
  userId    String
  requestId String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  request   FeatureRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([userId, requestId])
}

