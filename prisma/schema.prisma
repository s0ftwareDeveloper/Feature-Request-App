generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_token     String? @db.Text
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model featurerequest {
  id          String   @id
  title       String   @db.VarChar(100)
  description String   @db.VarChar(500)
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      String
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FeatureRequest_userId_fkey")
  upvote      upvote[]

  @@index([createdAt], map: "FeatureRequest_createdAt_idx")
  @@index([status], map: "FeatureRequest_status_idx")
  @@index([userId], map: "FeatureRequest_userId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model upvote {
  id             String         @id
  userId         String
  requestId      String
  featurerequest featurerequest @relation(fields: [requestId], references: [id], onDelete: Cascade, map: "Upvote_requestId_fkey")
  user           user           @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Upvote_userId_fkey")

  @@unique([userId, requestId], map: "Upvote_userId_requestId_key")
  @@index([requestId], map: "Upvote_requestId_fkey")
}

model user {
  id             String           @id
  name           String?
  email          String           @unique(map: "User_email_key")
  password       String
  role           String           @default("user")
  emailVerified  DateTime?
  image          String?
  account        account[]
  featurerequest featurerequest[]
  session        session[]
  upvote         upvote[]
}
